package ro.pub.acse.sapd.model.entities;

import ro.pub.acse.sapd.data.DataType;
import ro.pub.acse.sapd.diagrams.schema.DiagramBlock;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents an input channel that takes data takes data from the outside world and stores in into our database
 */
@Entity
public class DataChannel implements Serializable, DiagramBlock {
    private static final long serialVersionUID = -4876823382677721689L;

    private long id;
    private String name;
    private String description;
    private DataType dataType;
    private ProcessorBlock inputPreprocessor;
    private Set<FunctionalDiagram> subscribedDiagrams;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(columnDefinition="text")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the final data type of this input channel.
     * Determines how the DataPoints generated by this channel are stored
     *
     * @return dataType of channel
     */
    @NotNull
    @Enumerated(EnumType.STRING)
    public DataType getDataType() {
        return dataType;
    }

    /**
     * Sets the final data type of this input channel.
     * Determines how the DataPoints generated by this channel are stored
     *
     * @param dataType data type of this channel
     */
    public void setDataType(DataType dataType) {
        this.dataType = dataType;
    }

    @ManyToOne
    public ProcessorBlock getInputPreprocessor() {
        return inputPreprocessor;
    }

    public void setInputPreprocessor(ProcessorBlock inputPreprocessor) {
        this.inputPreprocessor = inputPreprocessor;
    }

    @ManyToMany(cascade = CascadeType.ALL)
    public Set<FunctionalDiagram> getSubscribedDiagrams() {
        return subscribedDiagrams;
    }

    private void setSubscribedDiagrams(Set<FunctionalDiagram> subscribedDiagrams) {
        this.subscribedDiagrams = subscribedDiagrams;
    }

    public boolean addSubscribedDiagram(FunctionalDiagram diagram) {
        if (subscribedDiagrams == null) {
            subscribedDiagrams = new HashSet<>();
        }
        return subscribedDiagrams.add(diagram);
    }

    public boolean removeSubscribedDiagram(FunctionalDiagram diagram) {
        return subscribedDiagrams.remove(diagram);
    }
}
